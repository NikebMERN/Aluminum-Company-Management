import db from "../config/db.js";

// Get items assigned to sub-admin
export const getAssignedItems = async (req, res) => {
    try {
        const subAdminId = req.user.id;
        const [items] = await db.query(
            "SELECT * FROM aluminum_items WHERE sub_admin_id = ?",
            [subAdminId]
        );
        res.json(items);
    } catch (error) {
        res.status(500).json({ message: "Server error", error: error.message });
    }
};

// Update sold quantity for an item
export const updateSoldQuantity = async (req, res) => {
    const { itemId, quantitySold } = req.body;

    if (!itemId || !quantitySold) {
        return res.status(400).json({ message: "Item ID and quantitySold are required" });
    }

    const connection = await db.getConnection(); // ✅ Get dedicated connection for transaction

    try {
        // Start transaction
        await connection.beginTransaction();

        // 1️⃣ Get item details
        const [itemRows] = await connection.query(
            "SELECT id, given_quantity, sold_quantity, sub_admin_id, shape FROM aluminum_items WHERE id = ?",
            [itemId]
        );

        if (itemRows.length === 0) {
            await connection.rollback();
            connection.release();
            return res.status(404).json({ message: "Item not found" });
        }

        const item = itemRows[0];
        const newSoldQuantity = item.sold_quantity + quantitySold;

        if (newSoldQuantity > item.given_quantity) {
            await connection.rollback();
            connection.release();
            return res.status(400).json({ message: "Sold quantity cannot exceed given quantity" });
        }

        // 2️⃣ Update sold quantity in aluminum_items
        await connection.query(
            "UPDATE aluminum_items SET sold_quantity = ? WHERE id = ?",
            [newSoldQuantity, itemId]
        );

        // 3️⃣ Insert sale record into sales table
        await connection.query(
            "INSERT INTO sales (item_id, quantity_sold, sold_by) VALUES (?, ?, ?)",
            [itemId, quantitySold, req.user?.id || item.sub_admin_id]
        );

        // Commit transaction
        await connection.commit();

        const remainingQuantity = item.given_quantity - newSoldQuantity;

        res.json({
            message: "Sold quantity updated successfully & sale recorded",
            itemId: item.id,
            shape: item.shape,
            subAdminId: item.sub_admin_id,
            quantitySold,
            remainingQuantity
        });
    } catch (error) {
        await connection.rollback(); // Rollback only on error
        res.status(500).json({ message: "Server error", error: error.message });
    } finally {
        connection.release(); // Always release connection
    }
};


// Get revenue generated by sub-admin
export const getRevenue = async (req, res) => {
    try {
        const subAdminId = req.user.id;
        const [rows] = await db.query(
            `SELECT shape, given_quantity, sold_quantity, price_per_item, 
              sold_quantity * price_per_item AS total_revenue 
       FROM aluminum_items WHERE sub_admin_id = ?`,
            [subAdminId]
        );
        res.json(rows);
    } catch (error) {
        res.status(500).json({ message: "Server error", error: error.message });
    }
};
